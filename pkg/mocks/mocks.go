// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/jeremycruzz/msds301-wk8/pkg/types"
)

// MockWikipediaApi is a mock of WikipediaApi interface.
type MockWikipediaApi struct {
	ctrl     *gomock.Controller
	recorder *MockWikipediaApiMockRecorder
}

// MockWikipediaApiMockRecorder is the mock recorder for MockWikipediaApi.
type MockWikipediaApiMockRecorder struct {
	mock *MockWikipediaApi
}

// NewMockWikipediaApi creates a new mock instance.
func NewMockWikipediaApi(ctrl *gomock.Controller) *MockWikipediaApi {
	mock := &MockWikipediaApi{ctrl: ctrl}
	mock.recorder = &MockWikipediaApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWikipediaApi) EXPECT() *MockWikipediaApiMockRecorder {
	return m.recorder
}

// Query mocks base method.
func (m *MockWikipediaApi) Query(query string) (*types.WikiPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", query)
	ret0, _ := ret[0].(*types.WikiPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockWikipediaApiMockRecorder) Query(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockWikipediaApi)(nil).Query), query)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRepository) Get(title string) (*types.WikiTableInsert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", title)
	ret0, _ := ret[0].(*types.WikiTableInsert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), title)
}

// GetTitles mocks base method.
func (m *MockRepository) GetTitles() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTitles")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetTitles indicates an expected call of GetTitles.
func (mr *MockRepositoryMockRecorder) GetTitles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTitles", reflect.TypeOf((*MockRepository)(nil).GetTitles))
}

// Insert mocks base method.
func (m *MockRepository) Insert(arg0 *types.WikiTableInsert) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockRepositoryMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRepository)(nil).Insert), arg0)
}

// Update mocks base method.
func (m *MockRepository) Update(data *types.WikiTableInsert) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), data)
}

// MockChatGptService is a mock of ChatGptService interface.
type MockChatGptService struct {
	ctrl     *gomock.Controller
	recorder *MockChatGptServiceMockRecorder
}

// MockChatGptServiceMockRecorder is the mock recorder for MockChatGptService.
type MockChatGptServiceMockRecorder struct {
	mock *MockChatGptService
}

// NewMockChatGptService creates a new mock instance.
func NewMockChatGptService(ctrl *gomock.Controller) *MockChatGptService {
	mock := &MockChatGptService{ctrl: ctrl}
	mock.recorder = &MockChatGptServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatGptService) EXPECT() *MockChatGptServiceMockRecorder {
	return m.recorder
}

// Ask mocks base method.
func (m *MockChatGptService) Ask(prompt string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ask", prompt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Ask indicates an expected call of Ask.
func (mr *MockChatGptServiceMockRecorder) Ask(prompt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ask", reflect.TypeOf((*MockChatGptService)(nil).Ask), prompt)
}

// MockSummarizerService is a mock of SummarizerService interface.
type MockSummarizerService struct {
	ctrl     *gomock.Controller
	recorder *MockSummarizerServiceMockRecorder
}

// MockSummarizerServiceMockRecorder is the mock recorder for MockSummarizerService.
type MockSummarizerServiceMockRecorder struct {
	mock *MockSummarizerService
}

// NewMockSummarizerService creates a new mock instance.
func NewMockSummarizerService(ctrl *gomock.Controller) *MockSummarizerService {
	mock := &MockSummarizerService{ctrl: ctrl}
	mock.recorder = &MockSummarizerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSummarizerService) EXPECT() *MockSummarizerServiceMockRecorder {
	return m.recorder
}

// Summarize mocks base method.
func (m *MockSummarizerService) Summarize(topic string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Summarize", topic)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Summarize indicates an expected call of Summarize.
func (mr *MockSummarizerServiceMockRecorder) Summarize(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Summarize", reflect.TypeOf((*MockSummarizerService)(nil).Summarize), topic)
}
